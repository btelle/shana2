#!/usr/bin/env python
"""
shana2 - an over engineered, phenny semi-compatible Python 3 IRC bot
Copyright 2013, icecapsol@gmail.com

Large chunks of code derived from phenny

Copyright 2008, Sean B. Palmer, inamidst.com
Licensed under the Eiffel Forum License 2.
http://inamidst.com/phenny/
"""

import sys, os, re, time, socket, asyncore, asynchat, imp, threading, datetime, traceback, getopt, signal
import ssl, errno, select
import yaml
from multiprocessing import Process, Pipe, Queue

class Communicator():
	class Listener(asynchat.async_chat):
		def __init__(self, box, config):
			asynchat.async_chat.__init__(self)
			self.set_terminator(b'\n')
			self.buffer = b''
			self.outbox = box
			self.reload_config(config)
		
		def reload_config(self, config):
			self.config = config
			self.host = config['host']
			self.port = config['port']
			self.ssl = False if 'ssl' not in config.keys() else config['ssl']
			
			if self.ssl:
				self.send = self._ssl_send
				self.recv = self._ssl_recv
			else:
				self.send = asynchat.async_chat.send
				self.recv = asynchat.async_chat.recv
				
		def _ssl_send(self, data):
			try:
				result = self.write(data)
				return result
			except ssl.SSLError as why:
				if why[0] in (asyncore.EWOULDBLOCK, errno.ESRCH):
					return 0
				else:
					raise ssl.SSLError(why)
				return 0
		
		def _ssl_recv(self, buffer_size):
			try:
				data = self.read(buffer_size)
				if not data:
					self.handle_close()
					return ''
				return data
			except ssl.SSLError as why:
				if why[0] in (asyncore.ECONNRESET, asyncore.ENOTCONN,
						  asyncore.ESHUTDOWN):
					self.handle_close()
					return ''
				elif why[0] == errno.ENOENT:
					return ''
				else:
					raise
	
		def send_letter(self, to, subject, body):
			l = Letter(to, subject, body, "self.communicator")
			self.outbox.put(l)
		
		def log(self, line, level):
			self.send_letter("module.bot.logger", "LOG", {'module': 'Listener', 'time': int(time.time()), 'text': line, 'level': level})
		
		def initiate_connect(self): 
			self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
			self.log("Connecting to %s %s" % (self.host, self.port), "STATUS")
			try:
				self.connect((self.host, int(self.port)))
				self.reconnect_wait = 10
			except:
				self.log("%s: %s" % sys.exc_info()[:2], "ERROR")
				self.reconnect_wait = (self.reconnect_wait * 2) % 240
				
		def handle_connect(self): 
			if self.ssl:
				self.ssl_sock = ssl.wrap_socket(self.socket, do_handshake_on_connect=False)
				self.set_socket(self.ssl_sock)
				while True:
					try:
						self.socket.do_handshake()
						break
					except ssl.SSLError as err:
						if err.args[0] == ssl.SSL_ERROR_WANT_READ:
							select.select([self.socket], [], [])
						elif err.args[0] == ssl.SSL_ERROR_WANT_WRITE:
							select.select([], [self.socket], [])
						else:
							raise
			self.send_letter("module.irc.login", "CONNECT", {'message': "new connection"})
		def handle_close(self):
			if self.reconnect_wait == 10:
				self.log("Connection to %s lost. Reconnecting in %d seconds" % (self.host, self.reconnect_wait), "NOTICE")
			else:
				self.log("Connecting to %s failed. Retrying in %d seconds" % (self.host, self.reconnect_wait), "WARNING")
			self.close()
			time.sleep(self.reconnect_wait)
			self.initiate_connect()

		def handle_error(self):
			for line in traceback.format_exc().split('\n'):
				self.log(line, "ERROR")
			self.log("Send buffer: %s" % self.buffer, "ERROR")

		def collect_incoming_data(self, data): 
			self.buffer += data
		def found_terminator(self):
			line = self.buffer
			if line.decode().endswith('\r'): 
				line = line[:-1]
			self.buffer = b''
			self.log("New line: %s" % line.decode(), "DEBUG")
			self.send_letter("self.parser", "NEW LINE", {'line': line.decode()})
		def run(self):
			self.initiate_connect()
			try: asyncore.loop()
			except KeyboardInterrupt: 
				sys.exit(0)
	class Speaker():
		def __init__(self, inbox, comm):
			self.inbox = inbox
			self.comm = comm
		
		def log(self, line, level):
			self.comm.send_letter("module.bot.logger", "LOG", {'module': 'Speaker', 'time': int(time.time()), 'text': line, 'level': level})
		
		def run(self):
			while True:
				letter = self.inbox.recv()
				if letter.subject == "NEW IRC OUTPUT":
					try: self.comm.push(letter.body['message'].encode('utf-8'))
					except:
						try:
							self.comm.push(letter.body['message'].encode('cp1252'))
							self.log("Badly encoded characters in message:", "WARNING")
							self.log(letter.body['message'], "WARNING")
						except:
							for line in traceback.format_exc().split('\n'):
								self.log(line, "ERROR")
							self.log(letter.body['message'], "ERROR")
					time.sleep(0.1)
				elif letter.subject == "RELOAD":
					self.comm.reload_config(letter.body['config'])
					self.log("Reloading Listener's configuration", "NOTICE")
	
	def __init__(self, inbox, outbox, config):
		self.listener = Communicator.Listener(outbox, config)
		self.speaker = Communicator.Speaker(inbox, self.listener)
		signal.signal(signal.SIGINT, self.die)
		
	def die(self, sig, frame):
		sys.exit(0)
	
	def run(self):
		t = threading.Thread(target=self.listener.run, args=())
		t.start()
		self.speaker.run()

class Parser():
	def __init__(self, inbox, outbox, config):
		self.reload_config(config)
		self.inbox = inbox
		self.outbox = outbox
		self.source = re.compile(r'([^!]*)!?([^@]*)@?(.*)')
		signal.signal(signal.SIGINT, self.die)
		
	def reload_config(self, config):
		self.config = config
		
	def die(self, sig, frame):
		sys.exit(0)
		
	def send(self, to, subject, body):
		l = Letter(to, subject, body, "self.parser")
		self.outbox.put(l)
	def log(self, line, level):
		self.send("module.bot.logger", "LOG", {'module': 'Parser', 'time': int(time.time()), 'text': line, 'level': level})
		
	def run(self):
		while True:
			l = self.inbox.recv()
			if l.subject == "NEW LINE":
				line = l.body['line']
			elif l.subject == "RELOAD":
				self.reload_config(l.body['config'])
				continue
			else: continue
			self.log("new line '%s'" % line.strip(), "DEBUG")
			
			if line.startswith(':'): 
				source, line = line[1:].split(' ', 1)
			else: source = None

			if ' :' in line: 
				argstr, text = line.split(' :', 1)
			else: argstr, text = line, ''
			args = argstr.split()
			
			data = Data()
			match = self.source.match(source or '')
			data.nick, data.user, data.host = match.groups()

			if len(args) > 1: 
				target = args[1]
			else: target = None
			data.sender = {self.config['nick']: data.nick, None: None}.get(target, target)
			data.args = tuple([text] + args)
			
			self.send("self.generator", "NEW IRC DATA", {'data': data})

class Data():
	def __init__(self):
		pass

class Generator():
	def __init__(self, inbox, outbox, config):
		self.reload_config(config)
		self.inbox = inbox
		self.outbox = outbox
		signal.signal(signal.SIGINT, self.die)
	
	def reload_config(self, config):
		self.config = config
		
	def die(self, sig, frame):
		sys.exit(0)
	
	def send(self, to, subject, body):
		l = Letter(to, subject, body, "self.generator")
		self.outbox.put(l)
	
	def log(self, line, level):
		self.send("module.bot.logger", "LOG", {'module': 'Generator', 'time': int(time.time()), 'text': line, 'level': level})
	
	def run(self):
		while True:
			l = self.inbox.recv()
			if l.subject == "NEW IRC DATA":
				data = l.body['data']
			elif l.subject == "RELOAD":
				self.reload_config(l.body['config'])
				continue
			else:
				self.log("Got Erroneous letter. Subject: '%s'" % l.subject, "NOTICE")				
				continue
			event = Event(data.args[0], data, data.args[0], data.args[1], data.args[2:], self.config)
			self.send("self.launcher", "NEW EVENT", {'event': event})

class Event():
	def __init__(self, text, data, bytes, event, args, config):
		#s = str.__new__(cls, text)
		self.sender = data.sender
		self.nick = data.nick
		self.host = data.host
		self.user = data.user
		self.event = event
		self.bytes = bytes
		self.match = None
		self.search = None
		self.searches = None
		self.group = None #match.group
		self.groups = None #match.groups
		self.args = args
		self.admin = data.nick in config['groups']['admin']
		self.owner = data.nick == config['groups']['sysop']
		if data.nick.lower() in config['passwd']:
			self.username = data.nick.lower()
		else:
			self.username = 'nobody'
		self.ugroups = config['passwd'].get(self.username, ['nobody']) # 0 groups, 1 password, 2 home

class Launcher():
	def __init__(self, conf_name):
		self.inbox, self.box_r = Pipe()
		self.outbox = Queue(16386) # PO's inbox
		self.running = {}
		signal.signal(signal.SIGINT, self.die)
		self.conf_name = conf_name
		self.read_config()
		self.load_modules()
		self.startup()
		self.run()
	
	def read_config(self):
		conf_file = open(self.conf_name, "r")
		self.config = yaml.load(conf_file)
		conf_file.close()
	def write_config(self):
		os.rename(self.conf_name, self.conf_name+".sav")
		conf_file = open(self.conf_name, "w")
		yaml.dump(self.config, conf_file, default_flow_style=False)
		conf_file.close()
	def reload_config(self, config):
		self.config = config
		self.send("self.communicator", "RELOAD", {'config': self.merge(self.config.get('Communicator', {}), self.config["Global"])})
		self.send("self.parser", "RELOAD", {'config': self.merge(self.config.get('Parser', {}), self.config["Global"])})
		self.send("self.generator", "RELOAD", {'config': self.merge(self.config.get('Generator', {}), self.config["Global"])})
		self.send("self.post office", "RELOAD", {'config': self.merge(self.config.get('Post Office', {}), self.config["Global"])})
	def merge(self, x,y):        
		merged = dict(list(x.items()) + list(y.items()))
		xkeys = x.keys()
	                      
		for key in xkeys:                               
			if str(type(x[key])) == "<class 'dict'>" and key in y.keys():
				merged[key] = self.merge(x[key],y[key])
		return merged
		
	def die(self, sig, frame):
		sys.exit(0)
	
	def load_module(self, fn):
		mod = Module(fn, dict(list(self.config.get("Modules", {}).items()) + list(self.config["Global"].items()) + list(self.config.get("Module.%s" % fn.rpartition(".")[0], {}).items())))
		for m in self.modules:
			if m.name == mod.name:
				self.modules.remove(m)
		self.modules.append(mod)

	def load_modules(self):
		self.modules = []
		exceptions = []
		for fn in [fn for fn in os.listdir("modules") if os.path.isfile("modules/"+fn) and not fn.startswith("_") and fn.endswith(".py")]:
			try: self.load_module(fn)
			except:
				trace = traceback.format_exc()
				print(trace)
				exceptions.append(fn)
		self.log("Loaded %d modules (%d errors)" % (len(self.modules), len(exceptions)), "NOTICE")
	
	def launch_module(self, mod, func, event=None):
		q = Pipe()
		p = Process(target=mod.start, args=(event, func, (q[0], self.outbox), mod.name))
		p.start()
		self.send("self.post office", "Add", {'name': "module.%s.%s.%s" % (mod.name, func.name, p.pid), "queue": q[1]})
		self.log("Launching module %s.%s.%s" % (mod.name, func.name, p.pid), "STATUS")
		return p
	
	def startup(self):
		# Post office
		self.pobox = Postoffice(self.outbox, dict(list(self.config.get("Post Office", {}).items()) + list(self.config["Global"].items())))
		p = Process(target=self.pobox.run, args=())
		p.start()
		self.send("self.post office", "Add", {'name': "self.launcher.%s" % p.pid, "queue": self.box_r})
		self.log("Starting post office", "NOTICE")
		
		# generator
		self.log("Starting generator", "NOTICE")
		gbox = Pipe()
		self.generator = Generator(gbox[0], self.outbox, dict(list(self.config.get('Generator', {}).items()) + list(self.config["Global"].items())))
		p = Process(target=self.generator.run, args=())
		p.start()
		self.send("self.post office", "Add", {'name': "self.generator.%s" % p.pid, "queue": gbox[1]})
		
		# parser
		self.log("Starting parser", "NOTICE")
		pbox = Pipe()
		self.parser = Parser(pbox[0], self.outbox, dict(list(self.config.get('Parser', {}).items()) + list(self.config["Global"].items())))
		p = Process(target=self.parser.run, args=())
		p.start()
		self.send("self.post office", "Add", {'name': "self.parser.%s" % p.pid, "queue": pbox[1]})
		
		# listener
		self.log("Starting communicator", "NOTICE")
		lbox = Pipe()
		self.communicator = Communicator(lbox[0], self.outbox, dict(list(self.config.get('Communicator', {}).items()) + list(self.config["Global"].items())))
		p = Process(target=self.communicator.run, args=())
		p.start()
		self.send("self.post office", "Add", {'name': "self.communicator.%s" % p.pid, "queue": lbox[1]})
		
		for m in self.modules:
			for func in m.functions:
				if func.startup:
					self.log("Launching startup module %s." % func.name, "STATUS")
					self.launch_module(m, func, None)

	def send(self, to, subject, body):
		l = Letter(to, subject, body, "self.launcher")
		self.outbox.put(l)
	
	def log(self, line, level):
		self.send("module.bot.logger", "LOG", {'module': 'Launcher', 'time': int(time.time()), 'text': line, 'level': level})
	
	def shutdown(self, args):
		pass
	
	def get_module_function(self, name):
		if isinstance(name, list) or isinstance(name, tuple):
			try: module_class, module_name, function_name = name
			except: return (None, None)
		else:
			try: module_class, module_name, function_name = name.split(".")
			except: return (None, None)
		try:
			module = [mod for mod in self.modules if mod.name == module_name][0]
			function = [func for func in module.functions if func.name == function_name][0]
			return (module, function)
		except:
			return (None, None)
	
	def run(self):
		while True:
			letter = self.inbox.recv()
			if letter.subject == "NEW EVENT":
				event = letter.body['event']
				remove = []
				for tag, proclist in self.running.items():
					for proc in proclist:
						if not proc['proc'].is_alive():
							proc['proc'].join(1)
							proclist.remove(proc)
					if len(proclist) == 0:
						remove.append(tag)
				for tag in remove:
					del self.running[tag]
				for m in self.modules:
					for func in m.trigger(event):
						if func.service and "module.%s.%s" % (m.name, func.name) in self.running.keys():
							self.send("module.%s.%s" % (m.name, func.name), "NEW EVENT", {'event': event, 'modname': m.name, 'funcname': func.name, 'service': True})
						else:
							p = self.launch_module(m, func, event)
							self.running.setdefault("module.%s.%s" % (m.name, func.name), [])
							self.running["module.%s.%s" % (m.name, func.name)].append({'pid': p.pid, 'proc': p})
			elif letter.subject == "WAKE":
				mod, func = self.get_module_function(letter.body['letter'].to_f[:3])
				if not func:
					self.send("self.post office", "WAKE FAIL", {'letter': letter.body['letter']})
					self.log("Badly formatted WAKE event %s" % letter.body['letter'].to, "ERROR")
				full_name = letter.body['letter'].to
				if full_name in self.running.keys() and len(self.running[full_name]) > 0:
					self.log("WAKE event for module already awake sent to %s" % full_name, "DEBUG")
					self.outbox.put(Letter(letter.body['letter'].to, letter.body['letter'].subject, letter.body["letter"].body, letter.body["letter"].sender))
					continue

				if not func.wake_on_letter:
					self.send("self.post office", "WAKE FAIL", {'letter': letter.body['letter']})
					self.log("Attempt to wake %s denied because function doesn't allow wakes" % letter.body['letter'].to, "CAUTION")

				else:
					p = self.launch_module(mod, func)
					self.running.setdefault("module.%s.%s" % (mod.name, func.name), [])
					self.running["module.%s.%s" % (mod.name, func.name)].append({'pid': p.pid, 'proc': p})
					self.outbox.put(Letter(letter.body['letter'].to, letter.body['letter'].subject, letter.body["letter"].body, letter.body["letter"].sender))

			elif letter.subject == "RELOAD MODULE":
				for name in letter.body['names']:
					if os.path.isfile("modules/"+name+".py"):  # RFI
						try:
							self.load_module(name+".py")
							self.send("self.communicator", "NEW IRC OUTPUT", {'message': "PRIVMSG %s :%s: modules.%s (version: %s)\r\n" % (letter.body['sender'], letter.body['nick'], name+".py", datetime.datetime.now())})
						except Exception as e:
							self.send("self.communicator", "NEW IRC OUTPUT", {'message': "PRIVMSG %s :%s: Error loading module %s: %s\r\n" % (letter.body['sender'], letter.body['nick'], name+".py", e)})
					else:
						self.send("self.communicator", "NEW IRC OUTPUT", {'message': "PRIVMSG %s :%s: Error loading module %s: file doesn't exist\r\n" % (letter.body['sender'], letter.body['nick'], name+".py")})
			elif letter.subject == "LAUNCH MODULE":
				full_name = letter.body['name'].split(".")[1:]
				full_name.insert("module", 0)
				mod, func = self.get_module_function(full_name)
				if func: self.launch_module(mod, func, letter.body.setdefault('args', {}))
				else: self.log("Request to launch module '%s' from %s failed: No such module or function" % ('.'.join(full_name), letter.sender), "ERROR")
			elif letter.subject == "LIST MODULES":
				mods = {}
				for mod in self.modules:
					mods[mod.name] = [func.name for func in mod.functions]
				self.send(letter.sender, "MODULES LIST", {'list': mods})
			elif letter.subject == "SET CONF":
				self.reload_config(self.merge(self.config, letter.body['config']))
			elif letter.subject == "SAVE CONF":
				self.write_config()
			elif letter.subject == "SHUTDOWN":
				if not letter.sender: continue
				mod_name, func_name = letter.sender.split(".", 2)[1:]
				for mod in self.modules:
					if mod.name == mod_name:
						if func_name in mod.acls.keys() and mod.acls[func_name]['group'] in ['sysop', 'admin']:
							self.shutdown(letter.body)

class Letter:
	def __init__(self,to, subject, body, sender=None):
		self.sender = sender
		self.to = to
		self.to_f = to.split('.')
		self.subject = subject
		self.body = body
	def match(self, test):
		if not self.sender:
			return False
		return test.match(self.sender)

class Postoffice():
	def __init__(self, queue, config):
		self.reload_config(config)
		self.inbox = queue
		self.boxes = {}
		signal.signal(signal.SIGINT, self.die)
	
	def reload_config(self, config):
		self.config = config
		
	def die(self, sig, frame):
		sys.exit(0)
	
	def mkbox(self, box_name, queue):
		name, box = self.best_match(box_name.split("."), self.boxes, 0)
		if name:
			print("POST OFFICE: Error adding outbox for %s. Name exists" % name)
			return False
		self.boxes[box_name] = queue
		return True
	
	def rmbox(self, box_name):
		name, box = self.best_match(box_name.split("."), self.boxes, 0)
		if not name:
			print("POST OFFICE: No outbox for %s." % name)
			return False
		try: box.send(Letter(name, "LAST LETTER", {}, "self.post office"))
		except: pass
		del self.boxes[name]
		return True

	def process(self, letter):
		if letter.subject == "Add":
			self.mkbox(letter.body['name'], letter.body["queue"])
		elif letter.subject == "Remove":
			self.rmbox(letter.body['name'])
		elif letter.subject == "RELOAD":
			self.reload_config(letter.body['config'])
		elif letter.subject == "LIST BOXES":
			name, box = self.best_match(letter.sender.split("."), self.boxes, 0)
			try: box.send(Letter(letter.sender, "LIST BOXES", {'list': list(self.boxes.keys())}, "self.post office"))
			except: pass
		elif letter.subject == "TEST BOXES":
			name, box = self.best_match(letter.body['query'], self.boxes, 0)
			try: self.boxes[letter.sender].send(Letter(letter.sender, "TEST BOXES", {'match': name}, "self.post office"))
			except: pass
		elif letter.subject == "DEL BOX":
			try: self.boxes[letter.sender].send(Letter(letter.sender, "DEL BOX", {'name': letter.body['name'], 'result': self.rmbox(letter.body['name'])}, "self.post office"))
			except: pass
		elif letter.subject == "WAKE FAIL":
			name, box = self.best_match(letter.to_f, self.boxes, 0)
			if name:
				l = letter.body['letter']
				l.body['RTS'] = l.subject
				l.subject = "RETURN TO SENDER"
				box.send(l)
	
	def best_match(self, name, dlist, level):
		candidates = dict([(n, i) for n, i in dlist.items() if len(n.split(".")) >= level+1 and n.split(".")[level] == name[level]])
		if level == len(name)-1:
			if len(candidates) > 0:
				return (tuple(candidates.keys())[0], tuple(candidates.values()))
			else:
				return (None, None)
		elif level < len(name)-1 and len(candidates) > 0:
			pick = self.best_match(name, candidates, level+1)
			return pick
		else:
			return (None, None)
	
	def run(self):
		while True:
			letter = self.inbox.get()
			
			if letter.to == "self.post office":
				self.process(letter)
				continue
			name, boxes = self.best_match(letter.to_f, self.boxes, 0)
			if name:
				for box in boxes:
					box.send(letter)
			else: # check if the module will wake up
				name, boxes = self.best_match(["self", "launcher"], self.boxes, 0)
				if not name:
					self.inbox.put(letter)
					time.sleep(0.01)
					continue
				boxes[0].send(Letter("self.launcher", "WAKE", {"letter": letter}))

class ACL():
	def __init__(self, module):
		self.owner = getattr(module, 'owner', 'nobody')
		self.group = getattr(module, 'group', 'nobody')
		if self.owner == 'nobody' or self.group == 'nobody':
			self.owner, self.group = ('nobody', 'nobody')
			self.mode = ((True, True), (True, True), (True, True))
		else:
			self.mode = getattr(module, 'mode', ((True, True), (True, False), (True, False))) # execute, modify
		self.funcs = {}

class Module():
	class Function():
		def __init__(self, name, func, config):
			def sub(pattern, self=self):
				# These replacements have significant order
				pattern = pattern.replace('$nickname', config['name'])
				return pattern.replace('$nick', r'%s[,:] +' % config['name'])
			self.name = name
			self.func = func
			self.rule = getattr(self.func, 'rule', [])
			self.commands = getattr(self.func, 'commands', [])
			self.startup = getattr(self.func, 'startup', False)
			self.service = getattr(self.func, 'service', False)
			self.wake_on_letter = getattr(self.func, 'wake_on_letter', False)
			if hasattr(self.func, "event"):
				if isinstance(self.func.event, str):
					self.event = [self.func.event,]
				else:
					self.event = self.func.event
			else:
				self.event = getattr(self.func, 'event', ['PRIVMSG'])
			#print(self.event)
			if self.rule:
				if isinstance(self.rule, str): 
					pattern = sub(self.rule)
					regexp = re.compile(pattern)
					self.rule = [regexp]

				if isinstance(func.rule, tuple): 
					# 1) e.g. ('$nick', '(.*)')
					if len(self.rule) == 2 and isinstance(self.rule[0], str): 
						prefix, pattern = self.rule
						prefix = sub(prefix)
						regexp = re.compile(prefix + pattern)
						self.rule = [regexp]

					# 2) e.g. (['p', 'q'], '(.*)')
					elif len(self.rule) == 2 and isinstance(self.rule[0], list): 
						prefix = config['prefix']
						commands, pattern = self.rule
						self.rule = []
						for command in commands: 
							command = r'(%s)(?: +(?:%s))?' % (command, pattern)
							regexp = re.compile(prefix + command)
							self.rule.append(regexp)

					# 3) e.g. ('$nick', ['p', 'q'], '(.*)')
					elif len(self.rule) == 3: 
						prefix, commands, pattern = self.rule
						prefix = sub(prefix)
						self.rule = []
						for command in commands: 
							command = r'(%s) +' % command
							regexp = re.compile(prefix + command + pattern)
							self.rule.append(regexp)

			if self.commands:
				c = []
				for command in self.commands: 
					template = r'^%s(%s)(?: +(.*))?$'
					pattern = template % (config['prefix'], command)
					regexp = re.compile(pattern)
					c.append(regexp)
				self.commands = c
	class Bot():
		def __init__(self, mail, event, name, pid, conf):
			self.inbox = mail[0]
			self.outbox = mail[1]
			self.letters = []
			self.name = '.'.join(name)
			self.input = event
			self.pid = pid
			self.conf = conf
			self.handlers = {'subject': [], 'sender': []}
		def write(self, args, text=None):
			def safe(data): 
				data = data.replace('\n', '')
				data = data.replace('\r', '')
				return data
			args = [safe(arg) for arg in args]
			if text is not None: 
				text = safe(text)
				self.send("self.communicator", "NEW IRC OUTPUT", {'message': ' '.join(args) + ' :' + text + '\r\n'})
			else: self.send("self.communicator", "NEW IRC OUTPUT", {'message': ' '.join(args) + '\r\n'})

		def msg(self, recipient, text):
			self.write(('PRIVMSG', recipient), text)
		def say(self, text):
			self.msg(self.input.sender, text)
		def reply(self, text):
			self.msg(self.input.sender, "%s: %s" % (self.input.nick, text))
		def call(self, module_name, args):
			d = Data()
			self.send("self.generator", "NEW IRC DATA", {'data': d})
		def send(self, to, subject, body):
			l = Letter(to, subject, body, self.name)
			self.outbox.put(l)
		def log(self, line, level):
			self.send("module.bot.logger", "LOG", {'module': self.name, 'time': int(time.time()), 'text': line, 'level': level})
		def register(self, func, subject=None, sender=None):
			if subject:
				if isinstance(subject, str):
					h = self.handlers['subject'].setdefault(subject, [])
					h.append(func)
					self.handlers['subject'][subject] = h
				else:
					for subj in subject:
						h = self.handlers['subject'].setdefault(subj, [])
						h.append(func)
						self.handlers['subject'][subj] = h
			if sender:
				if isinstance(sender, str):
					h = self.handlers['sender'].setdefault(sender, [])
					h.append(func)
					self.handlers['sender'][sender] = h
				else:
					for send in sender:
						h = self.handlers['sender'].setdefault(send, [])
						h.append(func)
						self.handlers['sender'][send] = h
		def loop(self):
			def callback(funcs, letter):
				for func in funcs:
					try: func(letter)
					except Exception as e:
						self.log("Exception in callback %s: %s" % (func.__name__, e), "ERROR")

			while True:
				l = self.recv()
				hits = [self.handlers['subject'][hit] for hit in self.handlers['subject'].keys() if hit == l.subject]
				hits.extend([self.handlers['sender'][hit] for hit in self.handlers['sender'].keys() if hit == l.sender])
				
				for hit in hits:
					callback(hit, l)
		def recv(self, subject=None, sender=None, block=True):
			while self.inbox.poll():
				self.letters.append(self.inbox.recv())
			if subject or sender:
				while True:
					if len(self.letters) == 0: self.letters.append(self.inbox.recv())
					if subject:
						matches = [mletter for mletter in self.letters if len([True for filt in subject if re.match(filt, mletter.subject)]) > 0]
						if len(matches) == 0 and block: continue
						elif len(matches) > 0:
							self.letters.remove(matches[0])
							return matches[0]
						else: return None
					elif sender:
						matches = [mletter for mletter in self.letters if len([True for filt in sender if re.match(filt, mletter.sender)]) > 0]
						if len(matches) == 0 and block: continue
						elif len(matches) > 0:
							self.letters.remove(matches[0])
							return matches[0]
						else: return None
			else:
				if len(self.letters) > 0:
					return self.letters.pop(0)
				elif block and len(self.letters) == 0:
					return self.inbox.recv()
				else:
					return None
				
		def discard(self, timeout=1):
			if self.inbox.poll(timeout):
				self.inbox.recv()
				return 1
			else:
				return 0
		
	def __init__(self, name, config):
		self.config = config
		module = getattr(__import__('modules.' + name.rpartition(".")[0]), name.rpartition(".")[0])
		imp.reload(module)
		self.name = name.rpartition(".")[0]
		self.functions = []
		self.acl = ACL(module)
		for name, func in vars(module).items():
			if not str(type(func)) == "<class 'function'>": continue
			fname = getattr(func, 'name', name)
			self.functions.append(Module.Function(fname, func, config))
			self.acl.funcs[fname] = {'owner': getattr(func, 'owner', 'nobody'), 
							    'group': getattr(func, 'group', 'nobody'), 
							    'priority': getattr(func, 'priority', 'low'), 
							    'mode': getattr(module, 'mode', (True, True, True))}
	
	def trigger(self, event):
		launch = []
		for func in self.functions:
			if event.event in func.event and ([True for regexp in func.rule if regexp.match(event.bytes)] or [True for regexp in func.rule if regexp.search(event.bytes)] or [True for regexp in func.commands if regexp.match(event.bytes)]) and self.approve(func, event):
				launch.append(func)
		return launch
	def approve(self, func, event):
		acl = self.acl.funcs[func.name]
		if acl['mode'][2] or (acl['group'] in event.ugroups and acl['mode'][1]) or (event.username == acl['owner'] and acl['mode'][0]):
			return True

	def start(self, event, func, mail, mod_name):
		if hasattr(os, 'getppid'):
			pid = os.getppid()
		else:
			pid = os.getpid()
		bot = Module.Bot(mail, event, ["module", self.name, func.name], pid, self.config)
		if event and hasattr(event, "bytes"):
			if func.commands:
				for command in func.commands:
					match = command.match(event.bytes)
					if match:
						event.match = match
						event.group = match.group
						event.groups = match.groups
			elif func.rule:
				for rule in func.rule:
					match = rule.match(event.bytes)
					if match:
						event.match = match
						event.group = match.group
						event.groups = match.groups
					search = rule.search(event.bytes)
					if search:
						event.search = search
						event.searches = rule.findall(event.bytes)
			else:
				event.match = None
				event.group = None
				event.groups = None

		#for lim, val in func.limits.items():
			#resource.setrlimit(lim, val)
		try: func.func(bot, event)
		except KeyboardInterrupt:
			pass
		except:
			trace = traceback.format_exc()
			for line in trace.split('\n'):
				bot.log(line, "ERROR")
			lines = list(reversed(trace.splitlines()))
			report = [lines[0].strip()]
			for line in lines: 
				line = line.strip()
				if line.startswith('File "/'): 
					report.append(line[0].lower() + line[1:])
					break
			else: report.append('source unknown')
			bot.say(report[0] + ' (' + report[1] + ')')
		try: bot.send("self.post office", "Remove", {'name': "module.%s.%s" % (mod_name, func.name)})
		except: pass

conf_name = "shana2.conf"

optlist, args = getopt.getopt(sys.argv[1:], 'c:', ['conf',])

for opt in optlist:
    if opt[0] in ['-c', '--conf']:
        conf_name = opt[1]

Launcher(conf_name)
